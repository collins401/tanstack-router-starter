/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutAllImport } from './routes/_layout/$all'
import { Route as LayoutAccountIndexImport } from './routes/_layout/account/index'
import { Route as LayoutSystemTestImport } from './routes/_layout/system/test'
import { Route as LayoutSystemMenuImport } from './routes/_layout/system/menu'
import { Route as LayoutSystemDictImport } from './routes/_layout/system/dict'
import { Route as LayoutAccountNoticeImport } from './routes/_layout/account/notice'
import { Route as LayoutSystemUserIndexImport } from './routes/_layout/system/user/index'
import { Route as LayoutSystemRoleIndexImport } from './routes/_layout/system/role/index'
import { Route as LayoutSystemUserRoleImport } from './routes/_layout/system/user/role'
import { Route as LayoutSystemRoleUserImport } from './routes/_layout/system/role/user'
import { Route as LayoutSystemLogOperlogImport } from './routes/_layout/system/log.operlog'
import { Route as LayoutSystemLogLogininforImport } from './routes/_layout/system/log.logininfor'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAllRoute = LayoutAllImport.update({
  path: '/$all',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAccountIndexRoute = LayoutAccountIndexImport.update({
  path: '/account/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSystemTestRoute = LayoutSystemTestImport.update({
  path: '/system/test',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSystemMenuRoute = LayoutSystemMenuImport.update({
  path: '/system/menu',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSystemDictRoute = LayoutSystemDictImport.update({
  path: '/system/dict',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAccountNoticeRoute = LayoutAccountNoticeImport.update({
  path: '/account/notice',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSystemUserIndexRoute = LayoutSystemUserIndexImport.update({
  path: '/system/user/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSystemRoleIndexRoute = LayoutSystemRoleIndexImport.update({
  path: '/system/role/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSystemUserRoleRoute = LayoutSystemUserRoleImport.update({
  path: '/system/user/role',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSystemRoleUserRoute = LayoutSystemRoleUserImport.update({
  path: '/system/role/user',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSystemLogOperlogRoute = LayoutSystemLogOperlogImport.update({
  path: '/system/log/operlog',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSystemLogLogininforRoute = LayoutSystemLogLogininforImport.update({
  path: '/system/log/logininfor',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_layout/$all': {
      preLoaderRoute: typeof LayoutAllImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/account/notice': {
      preLoaderRoute: typeof LayoutAccountNoticeImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/system/dict': {
      preLoaderRoute: typeof LayoutSystemDictImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/system/menu': {
      preLoaderRoute: typeof LayoutSystemMenuImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/system/test': {
      preLoaderRoute: typeof LayoutSystemTestImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/account/': {
      preLoaderRoute: typeof LayoutAccountIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/system/log/logininfor': {
      preLoaderRoute: typeof LayoutSystemLogLogininforImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/system/log/operlog': {
      preLoaderRoute: typeof LayoutSystemLogOperlogImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/system/role/user': {
      preLoaderRoute: typeof LayoutSystemRoleUserImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/system/user/role': {
      preLoaderRoute: typeof LayoutSystemUserRoleImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/system/role/': {
      preLoaderRoute: typeof LayoutSystemRoleIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/system/user/': {
      preLoaderRoute: typeof LayoutSystemUserIndexImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  LayoutRoute.addChildren([
    LayoutAllRoute,
    LayoutIndexRoute,
    LayoutAccountNoticeRoute,
    LayoutSystemDictRoute,
    LayoutSystemMenuRoute,
    LayoutSystemTestRoute,
    LayoutAccountIndexRoute,
    LayoutSystemLogLogininforRoute,
    LayoutSystemLogOperlogRoute,
    LayoutSystemRoleUserRoute,
    LayoutSystemUserRoleRoute,
    LayoutSystemRoleIndexRoute,
    LayoutSystemUserIndexRoute,
  ]),
  LoginRoute,
])

/* prettier-ignore-end */
